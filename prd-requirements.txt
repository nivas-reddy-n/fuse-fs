A FUSE Virtual File System with Metadata Storage, Cloud Sync and LFU Caching

1. Description:
    FUSE (Filesystem in User space) is a software interface in Unix-like operating systems that allows users to create custom file systems without changing kernel code. A FUSE-based virtual file system that enhances storage efficiency, security, and performance. It incorporatesmetadata-based storage and uses Mysql for efficient file management.Cloud integration: With Google Drive for remote file syncing, asynchronous sync, and deduplication
    LFU caching: To reduce disk I/O and improve read speeds.
    The system will be implemented in Python using fusepy, Mysql, and the Google Drive API.
        •	Throughput (MB/s): Measures the speed of data transfer.
        •	Cache Hit Ratio (%): Measures how effectively the LFU cache serves requests.
        •	Sync Success Rate (%): Measures how often file sync to Google Drive is successful.
    Benchmarking tool: UserBenchmark

2. Project Tasks:
    Phase 1: Research & Planning:
            1.1: Define system architecture (FUSE operations, database schema, caching strategy).            
            1.2: Research Google Drive API for file syncing.            
            1.3: Select authentication & access control mechanisms.
            1.4: Define deduplication strategy (SHA-256 hashing).
    Phase 2: Core File System Implementation:
            2.1: Implement FUSE-based virtual file system (mounting, reading, writing).            
            2.2: Develop MySQL metadata storage 
            2.3: Implement LFU caching (track and cache frequently accessed files).
    Phase 3: Cloud Integration: Implements Google Drive synchronisation:
            3.1 Asynchronous Sync: Instead of uploading files immediately, store them locally and sync in the background at scheduled intervals.
            3.2 Deduplication: Checks if a file already exists on Google Drive
    Phase 4: Testing, Optimization & Finalization:
            4.1: Performance testing (measure read/write speeds, LFU efficiency).            
            4.2: Security testing (validate authentication, logging).            
            4.3: Final refinements (bug fixes, documentation, optimisation).

3. Gantt Chart
Week	Tasks
1	    Research
2	    Core Fuse System
3-4	    Metadata Storage
5-7	    Cloud Sync
8-10	Asynchronous Sync & Deduplication
11	    LFU caching
12	    Testing & optimization


4. Libraries:  
    Fuse: Python libfuse library creates virtual filesystems in Linux using the FUSE framework.
    fh: file handle
    offset: The offset variable is used to track the position in the sentence. To begin with, the offset is -1. On each iteration of the while loop, the offset is set to the next index position for the starting character of the desired word.
    ENOENT: stands for "Error No Entry" and it is a standard error in Python that arises when the system cannot find a file or directory path specified in the code.

fusepy==3.0.1
mysql-connector-python==8.0.32
google-api-python-client==2.86.0
google-auth-httplib2==0.1.0
google-auth-oauthlib==1.0.0
pycryptodome==3.18.0
python-dotenv==1.0.0
pytest==7.3.1
pylint==2.17.4
